/*
 1. Реализовать свой тип коллекции «очередь» (queue) c использованием дженериков.
 2. Добавить ему несколько методов высшего порядка, полезных для этой коллекции (пример: filter для массивов)
 3. * Добавить свой subscript, который будет возвращать nil в случае обращения к несуществующему индексу.

 */



import UIKit


struct Queue<T> {
    var itemsArray = [T]()

    var count: Int {
        return itemsArray.count
    }

    mutating func enqueue(_ item: T){
        itemsArray.append(item)
    }
    mutating func dequeue() -> T? {
        if itemsArray.count > 0 {
            return itemsArray.removeFirst()
        } else {
            return nil
        }

    }

    mutating func add(_ item: [T]) {
        self.itemsArray.append(contentsOf: item)
    }


    func filter(array: [T], function: (T) -> Bool) -> [T] {
        var newArray = [T]()

        for i in array {
            if function(i) {
                newArray.append(i)
            }
        }
        return newArray
    }


    subscript(index: Int) -> T?{
        if index > itemsArray.count || index < 0{
            return nil
        }else{
            return itemsArray[index]
        }
    }

}


// ТИП Int:

var queueArray = Queue<Int>()
queueArray.enqueue(11)
queueArray.enqueue(12)
print(queueArray)
queueArray.add([13, 14, 15, 16])
print(queueArray)

queueArray.dequeue()
print(queueArray)


var oddArray = queueArray.filter(array: queueArray.itemsArray) {(i: Int) -> Bool in
    return i % 2 == 1
}

print(oddArray)

var evenArray = queueArray.filter(array: queueArray.itemsArray) {(i: Int) -> Bool in
    return i % 2 == 0
}

print(evenArray)



// ТИП String:

var stringArray = Queue<String>()
stringArray.enqueue("Sunday")
stringArray.enqueue("Monday")
stringArray.add(["Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"])
print(stringArray)


var filteredStArray = stringArray.filter(array: stringArray.itemsArray) {(i: String) -> Bool in
    return i.hasPrefix("T")
}

print(filteredStArray)


// ТИП Float:

var maxSpeed = Queue<Float>()
maxSpeed.add([20.56, 40.9, 12.4])
print(maxSpeed)

print(maxSpeed.filter(array: maxSpeed.itemsArray) {(i: Float) -> Bool in
    return i > 40}
)


print("______")
print(maxSpeed.count)
print(maxSpeed[2])
print(maxSpeed[-4])
